@page "/camps"
@using DevKnowledgeBase.UI.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject ITripService TripService
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Surf Camps</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-5">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h4" Class="mb-4">Surf Camps</MudText>
                
                <AuthorizeView Roles="Admin,Organizer">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenCreateDialog" Class="mb-4">
                        Create New Surf Camp
                    </MudButton>
                </AuthorizeView>
                
                @if (trips.Count == 0)
                {
                    <MudText>No surf camps found.</MudText>
                }
                else
                {
                    <MudGrid>
                        @foreach (var trip in trips)
                        {
                            <MudItem xs="12" sm="6" md="4">
                                <MudCard>
                                    @* <MudCardMedia Image="@trip.PhotosUrls" Height="200" /> *@
                                    <MudCardContent>
                                        <MudText Typo="Typo.h5">@trip.Name</MudText>
                                        <MudText Typo="Typo.body2">@trip.Location</MudText>
                                        <MudText Typo="Typo.body2">
                                            @GetDatesString(trip)
                                        </MudText>
                                        <MudText Typo="Typo.body2">
                                            Participants: @trip.CurrentParticipants/@trip.MaxParticipants
                                        </MudText>
                                        <MudText Typo="Typo.h6">@trip.Price.ToString("C")</MudText>
                                    </MudCardContent>
                                    <MudCardActions>
                                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => ViewDetails(trip.Id))">
                                            View Details
                                        </MudButton>
                                        
                                        <AuthorizeView Roles="Admin,Organizer">
                                            <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="@(() => OpenEditDialog(trip))">
                                                Edit
                                            </MudButton>
                                            <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="@(() => OpenDeleteDialog(trip))">
                                                Delete
                                            </MudButton>
                                        </AuthorizeView>
                                    </MudCardActions>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<TripModel> trips = new();

    private string GetDatesString(TripModel trip)
    {
        return $"{trip.StartDate.Value.ToString("MMM dd")} - {trip.EndDate.Value.ToString("MMM dd, yyyy")}";
    }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadTrips();
    }

    private async Task LoadTrips()
    {
        trips = await TripService.GetAllTripsAsync();
    }

    private void ViewDetails(Guid campId)
    {
        Navigation.NavigateTo($"/camps/{campId}");
    }

    private async Task OpenCreateDialog()
    {
        var dialog = await DialogService.ShowAsync<CampDialog>("Create Surf Camp");
        var result = await dialog.Result;
        
        if (!result.Canceled && result.Data is TripModel newTrip)
        {
            var createResult = await TripService.CreateTripAsync(newTrip);
            if (createResult.Success)
            {
                Snackbar.Add("Surf camp created successfully.", Severity.Success);
                await LoadTrips();
            }
            else
            {
                Snackbar.Add($"Failed to create surf camp: {createResult.ErrorMessage}", Severity.Error);
            }
        }
    }

    private async Task OpenEditDialog(TripModel trip)
    {
        var parameters = new DialogParameters { ["Trip"] = trip };
        var dialog = await DialogService.ShowAsync<CampDialog>("Edit Surf Camp", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled && result.Data is TripModel updatedTrip)
        {
            var updateResult = await TripService.UpdateTripAsync(updatedTrip);
            if (updateResult.Success)
            {
                Snackbar.Add("Surf camp updated successfully.", Severity.Success);
                await LoadTrips();
            }
            else
            {
                Snackbar.Add($"Failed to update surf camp: {updateResult.ErrorMessage}", Severity.Error);
            }
        }
    }

    private async Task OpenDeleteDialog(TripModel trip)
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = $"Are you sure you want to delete the surf camp '{trip.Name}'?",
            ["ButtonText"] = "Delete",
            ["Color"] = Color.Error
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Delete Surf Camp", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled)
        {
            var deleteResult = await TripService.DeleteTripAsync(trip.Id);
            if (deleteResult.Success)
            {
                Snackbar.Add("Surf camp deleted successfully.", Severity.Success);
                await LoadTrips();
            }
            else
            {
                Snackbar.Add($"Failed to delete surf camp: {deleteResult.ErrorMessage}", Severity.Error);
            }
        }
    }
}
