@page "/camps/{Id:guid}"
@using DevKnowledgeBase.UI.Models
@using Microsoft.AspNetCore.Components.Authorization

@inject ICampService CampService
@inject IBookingService BookingService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Surf Camp Details</PageTitle>

@if (camp == null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-5">
        <MudCard>
            @if (camp.PhotoUrls.Any())
            {
                <MudCarousel @bind-SelectedIndex="selectedPhotoIndex"
                             Style="height:400px;"
                             ShowArrows="true"
                             ShowDelimiters="true"
                             AutoCycle="true"
                             TData="object">
                    @foreach (var photo in camp.PhotoUrls)
                    {
                        <MudCarouselItem>
                            <div class="d-flex justify-center align-center" style="height:100%">
                                <img src="@($"https://localhost:7046/api/files/photos/{photo}")"
                                     alt="Camp Photo"
                                     style="max-height:100%; max-width:100%; object-fit:cover;" />
                            </div>
                        </MudCarouselItem>
                    }
                </MudCarousel>
            }
            <MudCardContent>
                <MudText Typo="Typo.h3">@camp.Name</MudText>
                <MudText Typo="Typo.h6">@camp.Location</MudText>

                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudPaper Class="pa-3 mud-theme-primary">
                            <MudText Typo="Typo.subtitle1"><b>Date:</b> @GetDatesString()</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudPaper Class="pa-3 mud-theme-secondary">
                            <MudText Typo="Typo.subtitle1"><b>Price:</b> @camp.Price.ToString("C")</MudText>
                        </MudPaper>
                    </MudItem>
                </MudGrid>

                <MudText Typo="Typo.body1" Class="mt-4">@camp.Description</MudText>

                <MudDivider Class="mt-4 mb-4" />

                <MudText Typo="Typo.subtitle2">Participants: @camp.CurrentParticipants/@camp.MaxParticipants</MudText>
                <MudText Typo="Typo.subtitle2">Organized by: @camp.OrganizerName</MudText>

                <MudDivider Class="mt-4 mb-4" />

                <AuthorizeView>
                    <Authorized>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   FullWidth="true"
                                   OnClick="OpenBookingDialog"
                                   Disabled="@(camp.CurrentParticipants >= camp.MaxParticipants || !camp.IsPublic)">
                            Book Now
                        </MudButton>
                    </Authorized>
                    <NotAuthorized>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="RedirectToLogin">
                            Login to Book
                        </MudButton>
                    </NotAuthorized>
                </AuthorizeView>
            </MudCardContent>
        </MudCard>

        <MudButton OnClick="GoBack" Class="mt-4" Variant="Variant.Text" Color="Color.Primary">
            Back to List
        </MudButton>
    </MudContainer>
}

@code {
    [Parameter] public Guid Id { get; set; }
    private CampModel camp;
    private int availableSpots => camp?.MaxParticipants - camp?.CurrentParticipants ?? 0;
    private int selectedPhotoIndex = 0;

    private string GetDatesString()
    {
        return $"{camp.StartDate.Value.ToString("MMM dd")} - {camp.EndDate.Value.ToString("MMM dd, yyyy")}";
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCamp();
    }

    private async Task LoadCamp()
    {
        try
        {
            camp = await CampService.GetCampByIdAsync(Id);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error loading surf camp details:" + ex.Message, Severity.Error);
            Navigation.NavigateTo("/camps");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/camps");
    }

    private void RedirectToLogin()
    {
        Navigation.NavigateTo($"/login?returnUrl=/camps/{Id}");
    }

    private async Task OpenBookingDialog()
    {
        var parameters = new DialogParameters
            {
                ["CampId"] = camp.Id,
                ["CampName"] = camp.Name,
                ["Price"] = camp.Price,
                ["MaxParticipants"] = availableSpots,
                ["Dates"] = GetDatesString()
            };

        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<BookingDialog>("Book Camp", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is int numberOfParticipants)
        {
            var booking = new CreateBookingModel
                {
                    CampId = camp.Id,
                    Participants = numberOfParticipants
                };

            var bookingResult = await BookingService.CreateBookingAsync(booking);
            if (bookingResult.Success)
            {
                Snackbar.Add("Booking created successfully!", Severity.Success);
                await LoadCamp(); // Refresh to see updated participant count
            }
            else
            {
                Snackbar.Add($"Failed to create booking: {bookingResult.ErrorMessage}", Severity.Error);
            }
        }
    }
}