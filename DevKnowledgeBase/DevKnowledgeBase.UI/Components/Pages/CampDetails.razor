@page "/camps/{Id:guid}"

@using DevKnowledgeBase.UI.Models
@using Microsoft.AspNetCore.Components.Authorization

@inject ICampService CampService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Surf Camp Details</PageTitle>

@if (camp == null)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-5">
        <MudCard>
            @* @if (!string.IsNullOrEmpty(trip.ImageUrl))
            {
                <MudCardMedia Image="@trip.ImageUrl" Height="400" />
            } *@
            <MudCardContent>
                <MudText Typo="Typo.h3">@camp.Name</MudText>
                <MudText Typo="Typo.h6">@camp.Location</MudText>
                
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudPaper Class="pa-3 mud-theme-primary">
                            <MudText Typo="Typo.subtitle1"><b>Date:</b>@GetDatesString()</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudPaper Class="pa-3 mud-theme-secondary">
                            <MudText Typo="Typo.subtitle1"><b>Price:</b> @camp.Price.ToString("C")</MudText>
                        </MudPaper>
                    </MudItem>
                </MudGrid>

                <MudText Typo="Typo.body1" Class="mt-4">@camp.Description</MudText>
                
                <MudDivider Class="mt-4 mb-4" />

                <MudText Typo="Typo.subtitle2">Participants: @camp.CurrentParticipants/@camp.MaxParticipants</MudText>
                <MudText Typo="Typo.subtitle2">Organized by: @camp.OrganizerName</MudText>
                
                <MudDivider Class="mt-4 mb-4" />
                
                <AuthorizeView>
                    <Authorized>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Disabled="@(camp.CurrentParticipants >= camp.MaxParticipants || !camp.IsPublic)">
                            Book Now
                        </MudButton>
                    </Authorized>
                    <NotAuthorized>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="RedirectToLogin">
                            Login to Book
                        </MudButton>
                    </NotAuthorized>
                </AuthorizeView>
            </MudCardContent>
        </MudCard>
        
        <MudButton OnClick="GoBack" Class="mt-4" Variant="Variant.Text" Color="Color.Primary">
            Back to List
        </MudButton>
    </MudContainer>
}

@code {
    [Parameter] public Guid Id { get; set; }
    private CampModel camp;
    private string GetDatesString()
    {
        return $"{camp.StartDate.Value.ToString("MMM dd")} - {camp.EndDate.Value.ToString("MMM dd, yyyy")}";
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTrip();
    }

    private async Task LoadTrip()
    {
        try
        {
            camp = await CampService.GetCampByIdAsync(Id);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error loading surf camp details:" + ex.Message, Severity.Error);
            Navigation.NavigateTo("/trips");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/trips");
    }

    private void RedirectToLogin()
    {
        Navigation.NavigateTo($"/login?returnUrl=/trips/{Id}");
    }
}
