@page "/reset-password"
@using DevKnowledgeBase.UI.Common

@inject NavigationManager Navigation
@inject IAuthenticationService AuthService

<PageTitle>Reset Password</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-5">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h5" Class="mb-4">Reset Password</MudText>
        @if (!string.IsNullOrEmpty(Message))
        {
            <MudAlert Severity="@(success ? Severity.Success : Severity.Error)" Class="mb-4">@Message</MudAlert>
        }
        <MudForm @ref="form">
            <MudTextField @bind-Value="NewPassword" Label="New Password" InputType="InputType.Password" Required="true" />
            <MudTextField @bind-Value="ConfirmPassword" Label="Confirm Password" InputType="InputType.Password" Required="true" />
            <MudButton Variant="Variant.Filled" OnClick="@(async () => await SendResetPasswordRequest())" Color="Color.Primary" Class="mt-4">Reset Password</MudButton>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private MudForm form;
    private string UserId = string.Empty;
    private string Token = string.Empty;

    private string NewPassword = string.Empty;
    private string ConfirmPassword = string.Empty;
    private string Message = string.Empty;
    private bool success = false;

    protected override void OnInitialized()
    {
        Navigation.TryGetQueryString<string>("userId", out UserId);
        Navigation.TryGetQueryString<string>("token", out Token);
    }

    private async Task SendResetPasswordRequest()
    {
        if (NewPassword != ConfirmPassword)
        {
            Message = "Passwords do not match.";
            success = false;
            return;
        }

        var result = await AuthService.ChangePasswordAsync(UserId, Token, NewPassword);
        success = result.Success;
        Message = success ? "Password changed successfully!" : result.ErrorMessage;
    }
}