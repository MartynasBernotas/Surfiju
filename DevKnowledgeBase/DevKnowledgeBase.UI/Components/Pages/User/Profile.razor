@page "/profile"

@inject IUserService UserService
@inject NavigationManager Navigation

<PageTitle>Profile</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-5">
    <MudPaper Class="pa-4">
        <MudGrid>
            <MudItem xs="12" sm="4" Class="d-flex justify-center align-items-center">
                <MudAvatar Style="height:80%; width:80%;">
                    <MudImage Src="@userModel.ProfilePicture" Alt="Profile Picture" />
                </MudAvatar>
            </MudItem>
            <MudItem xs="12" sm="8">
                <MudText Typo="Typo.h5" Class="mb-4">Edit Your Profile</MudText>
                <MudForm @ref="form">
                    <MudTextField @bind-Value="userModel.FullName" Label="Full Name" Required="true" />
                    <MudTextField @bind-Value="userModel.Email" Label="Email" Required="true" />
                    <MudTextField @bind-Value="userModel.ProfilePicture" Label="Profile Picture (URL)" />
                    <MudButton OnClick="@(async () => await HandleSubmit())" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">Update Profile</MudButton>
                </MudForm>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <MudAlert Dense="true" Severity="@(success ? Severity.Success : Severity.Error)" Class="mt-2">@errorMessage</MudAlert>
                }
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>
@code {
    private MudForm form;
    private UserProfileModel userModel = new UserProfileModel();
    private PasswordChangeModel passwordModel = new PasswordChangeModel();
    private string errorMessage = string.Empty;
    private bool success = false;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserService.GetUserProfileAsync();
        userModel.FullName = user.FullName;
        userModel.Email = user.Email;
        userModel.ProfilePicture = user.ProfilePicture;
        userModel.Id = user.Id;
    }

    private async Task HandleSubmit()
    {
        // Update user profile
        var updateResult = await UserService.UpdateUserProfileAsync(userModel);
        success = updateResult.Success;
        errorMessage = success ? "Profile updated successfully." : updateResult.ErrorMessage;
    }
}
